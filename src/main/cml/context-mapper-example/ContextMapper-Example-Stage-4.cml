ContextMap ContextMapper {
	contains LanguageCore, ArchitecturalRefactorings, StructuredServiceDecomposition, DiscoveryLibrary, Generators
	
	/**
	 * Pattern selection:
	 * ==================
	 * 
	 * The language core (CML language) provides a Published Language (PL) allowing to describe software systems
	 * in terms of DDD patterns. This PL is used by the other components. Since its not a public API (REST, Messaging, 
	 * or similar) we haven't added the Open Host Service (OHS) pattern.
	 * 
	 * 
	 * The discovery library conforms to the model provided by the language core (we always generate CML models
	 * according to the core). The generators and on the other hand may also influence the language sometimes.
	 * The core further uses the API of our Service Cutter library to generate new decompositions.
	 */	
	
	LanguageCore [PL]->[CF] DiscoveryLibrary

	LanguageCore [ACL]<-[OHS,PL] StructuredServiceDecomposition {
		exposedAggregates ServiceCutterInput, ServiceCutterAPI
	}
	
	LanguageCore [PL]-> Generators
	
	/* The refactorings are tightly coupled with the language. In this case the semantic model of the language
	 * can be seen as a Shared Kernel:
	 */
	LanguageCore [SK]<->[SK] ArchitecturalRefactorings
	
}

BoundedContext LanguageCore {
	domainVisionStatement "Provides the Context Mapper DSL (CML) modeling language to express architectures on the basis of Strategic Domain-driven Design (DDD) patterns."
	
	Aggregate StrategicDesign {
		Entity Context_Map {
			aggregateRoot
		}
		
		Entity Bounded_Context
		Entity UbiquitousLanguage
		
		Entity CustomerSupplierRelationship
		Entity UpstreamDownstreamRelationship
		Entity PartnershipRelationship
		Entity SharedKernelRelationship
		
		Entity OpenHostService
		Entity PublishedLanguage
		Entity AntiCorruptionLayer
		Entity Conformist
	}
	
	Aggregate TacticDesign {
		Entity ^Aggregate {
			aggregateRoot
		}
	
		Entity ^Entity
		Entity ^ValueObject
		Entity ^DomainEvent
		Entity ^Service
		Entity ^Repository
		Entity ^Factory
	}
	
}

BoundedContext ArchitecturalRefactorings {
	domainVisionStatement "Architectural Refactorings (ARs) allow to improve the architecture model iteratively."
	
	Aggregate StructuralRefactorings {
		Service SplitAggregateByEntities
		Service SplitBoundedContextByUseCase
		Service SplitBoundedContextByOwner
		Service ExtractAggregatesByVolatility
		Service ExtractAggregatesByCohesion
		Service MergeAggregates
		Service MergeBoundedContexts
		Service ExtractSharedKernel
		Service SuspendPartnership
	}
	
	Aggregate RelationshipRefactorings{
		Service ChangeSharedKernelToPartnership
		Service ChangePartnershipToSharedKernel
	}
}

BoundedContext StructuredServiceDecomposition {
	domainVisionStatement "The Service Cutter integration into Context Mapper allows to analyze the Context Map with respect to coupling criteria and supports to suggest improved Context Maps."
	
	Aggregate ServiceCutterInput { // input
		responsibilities "Input data needed to use the Service Cutter library"
	
		Entity EntityRelationshipDiagram {
			String name
			- List<ServiceCutterEntity> entities
			- List<EntityRelation> relations
		}
		
		Entity ServiceCutterEntity {
			String name
			List<String> nanoentities
		}
		
		Entity EntityRelation {
			- ServiceCutterEntity origin
			- ServiceCutterEntity destination
			- RelationType relationType
		}
		
		enum RelationType {
			AGGREGATION, COMPOSITION, INHERITANCE
		}
		
		ValueObject UserRepresentationContainer {
			- List<^UseCase> ^useCases	
			- List<SharedOwnerGroup> sharedOwnerGroups
			- List<^Aggregate> aggregates
			- List<^Entity> entities
			- List<PredefinedService> predefinedServices
			- List<SeparatedSecurityZone> separtedSecurityZones
			- List<SecurityAccessGroup> ^securityAccessGroup
			- List<Compatibilities> compatibilities
		}
		
		Entity ^UseCase {
			String name
			List<String> nanoentitiesRead
			List<String> nanoentitiesWritten
			boolean latencyCritical
		}
		
		Entity AvailabilityCriticality extends @RelatedGroup
		Entity ConsistencyCriticality extends @RelatedGroup
		Entity ContentVolatility extends @RelatedGroup
		Entity SecurityCriticality extends @RelatedGroup
		Entity StorageSimilarity extends @RelatedGroup
		Entity StructuralVolatility extends @RelatedGroup
		Entity ^Aggregate extends @RelatedGroup
		Entity PredefinedService extends @RelatedGroup
		Entity SharedOwnerGroup extends @RelatedGroup
		Entity SecurityAccessGroup extends @RelatedGroup
		Entity SeparatedSecurityZone extends @RelatedGroup
		
		Entity RelatedGroup {
			String name
			List<String> nanoentities
		}
		
		Entity Compatibilities {
			- List<Characteristic> ^contentVolatility
			- List<Characteristic> ^structuralVolatility
			- List<Characteristic> ^availabilityCriticality
			- List<Characteristic> ^consistencyCriticality
			- List<Characteristic> ^storageSimilarity
			- List<Characteristic> ^securityCriticality
		}
		
		Entity Characteristic {
			String characteristic
			List<String> nanoentities
		}
		
		ValueObject ServiceCutterContext {
			String systemName
			- SolverConfiguration solverConfiguration
			CouplingCriteriaCatalog criteriaCatalog
			List<CouplingInstance> couplingInstances
			Set<String> nanoEntities
		}
		
		ValueObject SolverConfiguration {
			String algorithm
			- List<CriterionPriority> solverPriorities
		}
		
		ValueObject CriterionPriority {
			String criterion
			- SolverPriority ^priority
		}
		
		enum SolverPriority {
			IGNORE, XS, ^S, M, L, XL, XXL;
		}
		
		Service ServiceCutterContextBuilder {
			@ServiceCutterContext buildCuttingContext(@EntityRelationshipDiagram erd);
			
			@ServiceCutterContext buildCuttingContextWithUserRepresentations(@EntityRelationshipDiagram erd, @UserRepresentationContainer userRepresentations);
			
			void useCustomSolverConfiguration(@SolverConfiguration customSolverConfiguration);
		}
	}
	
	Aggregate ServiceCutterAPI {
		Service ServiceCutter {
			@SolverResult generateDecomposition(@ServiceCutterContext context);
		}
	}
	
	Aggregate CouplingCriteria { // service decomposition process
		responsibilities "Criteria used to derive service decompositions: https://github.com/ServiceCutter/ServiceCutter/wiki/Coupling-Criteria "
	}
	
	Aggregate GraphClusteringAlgorithms { // service decomposition process
		responsibilities "Algorithms to compute decompositions on the basis of the coupling criteria."
		
		Entity Leung
	}
	
	Aggregate ServiceDecompositions { // output
		responsibilities "Resulting service cuts/decompositions."
		
		Entity SolverResult {
			- Set<ResultService> services
			- List<ServiceRelation> relations
		}
		
		Entity ServiceCut
		Entity ResultService { // mapped to Bounded Contexts in CML
			List<String> nanoentities
			char id
		}
		Entity ServiceRelation { // relationship between Bounded Context
			String serviceA
			String serviceB
			Set<String> sharedEntities
			- Direction direction
		}
		
		enum Direction {
			OUTGOING, INCOMING, BIDIRECTIONAL
		}
	}
}

BoundedContext DiscoveryLibrary {
	domainVisionStatement "The reverse engineering component can generate CML Context Maps from existing source code. This allows to reverse engineer the architecture model in projects with existing monoliths or microservices."
	
	Aggregate BoundedContextDiscoveryStrategies {
		responsibilities "Strategies to discover Bounded Contexts in existing source code."
		
		Entity SpringBootBoundedContextDiscoveryStrategy // discover Spring Boot applications (including aggregates, entities and value objects on the basis of RESTful HTTP resources)
		Entity DockerComposeRelationshipDiscoveryStrategy // discover relationships between (micro-)services on the basis of docker-compose files
	}
	
	Aggregate RelationshipDiscoveryStrategies {
		responsibilities "Strategies to discover relationships between Bounded Contexts in existing source code."
	}
}

BoundedContext Generators {
	domainVisionStatement "The generators allow to generate other representations of the architecture derived by a given CML Context Map."
	
	Aggregate GraphicalGenerators {
		Entity ContextMapGenerator
		Entity PlantUMLGenerator
	}

	Aggregate ServiceContractsGenerators { // generate (micro-)service generators
		Entity MDSLGenerator
	}
	
	Aggregate ServiceCutterGenerators { // generate ServiceCutter input files
		Entity ERDInputFileGenerator
		Entity UserRepresentationExamplesGenerator
		Entity UserRepresentationsJSONGenerator
		Entity CMLFromServiceCutterResultGenerator
	}
}