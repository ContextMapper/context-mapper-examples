/* Example Context Map written with 'ContextMapper DSL' */
ContextMap InsuranceTeamMap {
	type = ORGANIZATIONAL
	state = TO_BE
	
	/* Add contexts that represent subsystems/components to this organizational map: */
	contains CustomerManagementContext, CustomerSelfServiceContext, PolicyManagementContext, RiskManagementContext

	/* Add teams to this organizational map: */
	contains CustomersBackofficeTeam, CustomersFrontofficeTeam, ContractsTeam
	
	/* Define the subsystem/component relationships: */

	CustomerSelfServiceContext [D,C]<-[U,S] CustomerManagementContext

	PolicyManagementContext [D,CF]<-[U,OHS,PL] CustomerManagementContext
		
	PolicyManagementContext [P]<->[P] RiskManagementContext

	/* Define the team relationships: */
	 
	CustomersBackofficeTeam [U,S]->[D,C] CustomersFrontofficeTeam
	
	CustomersBackofficeTeam [U]->[D] ContractsTeam
	
}

/* Team Definitions */
BoundedContext CustomersBackofficeTeam implements CustomerManagementDomain realizes CustomerManagementContext {
	type = TEAM
	domainVisionStatement = "This team is responsible for implementing the customers module in the back-office system."
}

BoundedContext CustomersFrontofficeTeam implements CustomerManagementDomain realizes CustomerSelfServiceContext {
	type = TEAM
	domainVisionStatement = "This team is responsible for implementing the front-office application for the insurance customers."
}

BoundedContext ContractsTeam implements PolicyManagementDomain, RiskManagementDomain realizes PolicyManagementContext, RiskManagementContext {
	type = TEAM
	domainVisionStatement = "This team is responsible for implementing the contract-, policy-, and risk-management modules in the back-office system."
}

/* Bounded Context Definitions */
BoundedContext CustomerManagementContext implements CustomerManagementDomain {
	type = FEATURE
	domainVisionStatement = "The customer management context is responsible for managing all the data of the insurance companies customers."
	implementationTechnology = "Java, JEE Application"
	responsibilities = "Customers, Addresses"
	
	Aggregate Customers {
		Entity Customer { 
			aggregateRoot
			
			- SocialInsuranceNumber sin
			String firstname
			String lastname
			- List<Address> addresses
		}
		
		Entity Address {
			String street
			int postalCode
			String city
		}
		
		ValueObject SocialInsuranceNumber {
			String sin key
		}
	}
	
}

BoundedContext CustomerSelfServiceContext implements CustomerManagementDomain {
	type = APPLICATION
	domainVisionStatement = "This context represents a web application which allows the customer to login and change basic data records like the address."
	responsibilities = "Address Change"
	implementationTechnology = "PHP Web Application"
	
	Aggregate CustomerFrontend {
		Entity CustomerAddressChange {
			aggregateRoot
			
			- UserAccount issuer
			- Address changedAddress
		}
	}
	
	Aggregate Acounts {
		Entity UserAccount {
			aggregateRoot
			
			String username
			- Customer accountCustomer
		}
	}
}

BoundedContext PolicyManagementContext implements PolicyManagementDomain {
	type = FEATURE
	domainVisionStatement = "This bounded context manages the contracts and policies of the customers."
	responsibilities = "Offers, Contracts, Policies"
	implementationTechnology = "Java, Spring App"
	
	Aggregate Offers {
		Entity Offer {
			aggregateRoot
			
			int offerId
			- Customer client
			- List<Product> products
			BigDecimal price
		}
	}
	
	Aggregate Products {
		Entity Product {
			aggregateRoot
			
			- ProductId identifier
			String productName
		}
		
		ValueObject ProductId {
			int productId key
		}
	}
	
	Aggregate Contract {
		Entity Contract {
			aggregateRoot
			
			- ContractId identifier
			- Customer client
			- List<Product> products
		}
		
		ValueObject ContractId {
			int contractId key
		}
		
		Entity Policy {
			int policyNr
			- Contract contract
			BigDecimal price
		}
	}
}

BoundedContext RiskManagementContext implements RiskManagementDomain {
	type = FEATURE
	domainVisionStatement = "Uses data from PolicyManagement context to calculate risks."
	responsibilities = "Customer Risk Calculation"
	implementationTechnology = "Java, Spring App"
	
	Aggregate Risks {
		Entity CustomerRiskFactor {
			aggregateRoot
			
			int totalRiskFactor
			- List<Risk> risks
			- Customer client
		}
		
		ValueObject Risk {
			int likelihood
			String risk
		}
	}
}

/* Domain & Subdomain Definitions */
Domain InsuranceDomain {
	Subdomain CustomerManagementDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Subdomain managing everything customer-related."
	}
	Subdomain PolicyManagementDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Subdomain managing contracts and policies."
	}
	Subdomain RiskManagementDomain {
		type = GENERIC_SUBDOMAIN
		domainVisionStatement = "Subdomain supporting everything which relates to risk management."
	}
	Subdomain DebtsDomain {
		type = GENERIC_SUBDOMAIN
		domainVisionStatement = "Subomain including everything related to the incoming money (debts, dunning, etc.)"
	}
}



