/* This is an example output file for the 'Merge Aggregates' refactoring and shows a small part of the insurance example. */
ContextMap {
	contains CustomerManagementContext
	contains CustomerSelfServiceContext

	CustomerSelfServiceContext [D,C]<-[U,S] CustomerManagementContext {
		exposedAggregates = Customers
	}

}

/* 
 * The resulting bounded context after applying 'Merge Aggregates' to the file 'example-input.cml'.
 * The 'Addresses' aggregate has been merged into the 'Customers' aggregate.
 */
BoundedContext CustomerManagementContext implements CustomerManagementDomain {
	domainVisionStatement = "The customer management context is responsible for managing all the data of the insurance companies customers."
	responsibilities = "Customers, Addresses" 
	implementationTechnology = "Java, JEE Application"
	Aggregate Customers {
		Entity Customer {
			aggregateRoot
			- SocialInsuranceNumber sin
			String firstname
			String lastname
			- List<Address> addresses
		}
		ValueObject SocialInsuranceNumber {
			String sin key
		}
		Entity Address {
			String street
			int postalCode
			String city
		}
	}
}

BoundedContext CustomerSelfServiceContext implements CustomerManagementDomain {
	domainVisionStatement = "This context represents a web application which allows the customer to login and change basic data records like the address."
	type = APPLICATION
	responsibilities = "AddressChange"
	implementationTechnology = "PHP Web Application"
	
	Aggregate CustomerFrontend {
		Entity CustomerAddressChange {
			aggregateRoot
			- UserAccount issuer
			- Address changedAddress
		}
	}
	Aggregate Acounts {
		Entity UserAccount {
			aggregateRoot
			String username
			- Customer accountCustomer
		}
	}
}

/* Domain & Subdomain Definitions */
Domain InsuranceDomain {
	Subdomain CustomerManagementDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Subdomain managing everything customer-related."
	}
}

