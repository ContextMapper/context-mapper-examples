/* This is an example output file for the 'Extract Aggregates by Volatility' refactoring and shows a small part of the insurance example. */
ContextMap {
	contains CustomerSelfServiceContext

}

BoundedContext CustomerSelfServiceContext implements CustomerManagementDomain {
	domainVisionStatement = "This context represents a web application which allows the customer to login and change basic data records like the address."
	type = APPLICATION
	responsibilities = "AddressChange"
	implementationTechnology = "PHP Web Application"
	
	Aggregate Acounts {
		Entity UserAccount {
			aggregateRoot
			
			String username
			- Customer accountCustomer
		}
	}
}

/**
 * The extracted bounded context after applying 'Extract Aggregates by Volatility'
 * to 'example-input.cml'. The chosen volatility was 'OFTEN'.
 * 
 * You may want to change the name of newly created bounded contexts after applying refactorings.
 */
BoundedContext CustomerSelfServiceContext_Volatility_OFTEN {
	Aggregate CustomerFrontend {
		likelihoodForChange = OFTEN
		
		DomainEvent CustomerAddressChange {
			aggregateRoot
			
			- UserAccount issuer
			- Address changedAddress
		}
	}
}

/* Domain & Subdomain Definitions */
Domain InsuranceDomain {
	Subdomain CustomerManagementDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Subdomain managing everything customer-related."
	}
}
