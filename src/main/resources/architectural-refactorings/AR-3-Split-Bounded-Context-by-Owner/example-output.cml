/* This is an example output file for the 'Split Bounded Context by Owners' refactoring and shows a small part of the insurance example. */
ContextMap {
	contains CustomerSelfServiceContext

}

BoundedContext CustomerSelfServiceContext implements CustomerManagementDomain {
	domainVisionStatement = "This context represents a web application which allows the customer to login and change basic data records like the address."
	type = APPLICATION
	responsibilities = "AddressChange"
	implementationTechnology = "PHP Web Application"
	
	Aggregate CustomerFrontend {
		owner = CustomerFrontendTeam
		
		DomainEvent CustomerAddressChange {
			aggregateRoot
			
			- UserAccount issuer
			- Address changedAddress
		}
	}
}

/* Team Definitions */
BoundedContext CustomerBackendTeam {
	type = TEAM
}

BoundedContext CustomerFrontendTeam {
	type = TEAM
}

/**
 * The new bounded context created by the 'Split Bounded Context by Owners' refactoring applied to 'split-bc-by-owners-input-example.cml'.
 * 
 * Note that the refactoring does not produce meaningful bounded context names. You can use the 'Rename Element' refactoring (SHIFT-ALT-R) 
 * to rename the new aggregate.
 * 
 * The automated refactorings add newly created bounded contexts at the end of the 'bounded context' block, which might not always be the
 * desired order. You may change the order after the refactoring manually.
 */
BoundedContext NewBoundedContext1 {
	Aggregate Acounts {
		owner = CustomerBackendTeam
		
		Entity UserAccount {
			aggregateRoot
			
			String username
			- Customer accountCustomer
		}
	}
}

/* Domain & Subdomain Definitions */
Domain InsuranceDomain {
	Subdomain CustomerManagementDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Subdomain managing everything customer-related."
	}
}
