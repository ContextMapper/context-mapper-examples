/* This is an example input file for the 'Split Bounded Context by Duplicate Entity Name' refactoring and shows a small part of the insurance example. */
ContextMap {
	contains CustomerManagementContext

}

/* With a right-click on the 'CustomerManagementContext' bounded context you can execute the 'Split Bounded Context by Duplicate Entity Name' 
 * refactoring. It will split the bounded context into two since both aggregates, 'Customers' and 'CustomerSelfServiceFrontend' contain
 * an entity called 'Account'. The two entities have different meanings and purposes. 
 */
BoundedContext CustomerManagementContext implements CustomerManagementDomain {
	type = APPLICATION
	
	Aggregate Customers {
		Entity Customer {
			aggregateRoot
			
			- SocialInsuranceNumber sin
			String firstname
			String lastname
			- List<Address> addresses
		}
		Entity Address {
			String street
			int postalCode
			String city
		}
		ValueObject SocialInsuranceNumber {
			String sin key
		}
		
		// This 'Account' entity represents the customers bank account.
		Entity Account {
			String iban
			String bank
		}
	}
	Aggregate CustomerSelfServiceFrontend {
		DomainEvent CustomerAddressChange {
			aggregateRoot
			
			- UserAccount issuer
			- Address changedAddress
		}
		
		// This 'Account' entity represents the customers login for the self-service web application.
		Entity Account {
			String username
			- Customer accountCustomer
		}
	}
}

/* Domain & Subdomain Definitions */
Domain InsuranceDomain {
	Subdomain CustomerManagementDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Subdomain managing everything customer-related."
	}
}
