/* This is an example input file for the 'Split Bounded Context by Use Cases' refactoring and shows a small part of the insurance example. */
ContextMap {
	contains PolicyManagementContext

}

/* With a right-click on the 'PolicyManagementContext' bounded context you can execute the 'Split Bounded Context by Use Cases' refactoring.
 * It will split the existing bounded context and group the two aggregates of the 'CreateOffer4Customer' use case together. The 'Contract'
 * aggregate used by the 'UpdateContract' use case will be separated.
 */
BoundedContext PolicyManagementContext implements PolicyManagementDomain {
	type = FEATURE
	domainVisionStatement = "This bounded context manages the contracts and policies of the customers."
	responsibilities = "Offers, Contracts, Policies"
	implementationTechnology = "Java, Spring App"
	
	Aggregate Offers {
		useCases = CreateOffer4Customer
		
		Entity Offer {
			aggregateRoot
			
			int offerId
			- Customer client
			- List<Product> products
			BigDecimal price
		}
	}
	Aggregate Products {
		useCases = CreateOffer4Customer
		
		Entity Product {
			aggregateRoot
			
			- ProductId identifier
			String productName
		}
		ValueObject ProductId {
			int productId key
		}
	}
	Aggregate Contract {
		useCases = UpdateContract
		
		Entity Contract {
			aggregateRoot
			
			- ContractId identifier
			- Customer client
			- List<Product> products
		}
		ValueObject ContractId {
			int contractId key
		}
		
		Entity Policy {
			int policyNr
			- Contract contract
			BigDecimal price
		}
	}
}

/* Domain & Subdomain Definitions */
Domain InsuranceDomain {
	Subdomain PolicyManagementDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Subdomain managing contracts and policies."
	}
}

UseCase UpdateContract
UseCase CreateOffer4Customer
