/* This is an example output file for the 'Split Bounded Context by Use Cases' refactoring and shows a small part of the insurance example. */
ContextMap {
	contains PolicyManagementContext

}

BoundedContext PolicyManagementContext implements PolicyManagementDomain {
	domainVisionStatement = "This bounded context manages the contracts and policies of the customers."
	responsibilities = "Offers, Contracts, Policies"
	implementationTechnology = "Java, Spring App"
	
	Aggregate Contract {
		useCases = UpdateContract
		
		Entity Contract {
			aggregateRoot
			
			- ContractId identifier
			- Customer client
			- List<Product> products
		}
		ValueObject ContractId {
			int contractId key
		}
		
		Entity Policy {
			int policyNr
			- Contract contract
			BigDecimal price
		}
	}
}

/**
 * A new bounded context created by the 'Split Bounded Context by Use Cases' refactoring applied to 'split-bc-by-use-cases-input-example.cml'.
 * 
 * Note that the refactoring does not produce meaningful bounded context names. You can use the 'Rename Element' refactoring (SHIFT-ALT-R) 
 * to rename the new aggregate.
 */
BoundedContext NewBoundedContext1 {
	Aggregate Offers {
		useCases = CreateOffer4Customer
		
		Entity Offer {
			aggregateRoot
			
			int offerId
			- Customer client
			- List<Product> products
			BigDecimal price
		}
	}
	Aggregate Products {
		useCases = CreateOffer4Customer
		
		Entity Product {
			aggregateRoot
			
			- ProductId identifier
			String productName
		}
		ValueObject ProductId {
			int productId key
		}
	}
}

/* Domain & Subdomain Definitions */
Domain InsuranceDomain {
	Subdomain PolicyManagementDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Subdomain managing contracts and policies."
	}
}

UseCase UpdateContract
UseCase CreateOffer4Customer
