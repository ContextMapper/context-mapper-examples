/* The DDD Cargo sample application modeled in CML. Note that we split the application into multiple bounded contexts. */
ContextMap DDDSampleMap {
	contains CargoBookingContext
	contains VoyagePlanningContext
	contains LocationContext
	
	/* As Evans mentions in his book (Bounded Context chapter): The voyage planning can be seen as 
	 * separated bounded context. However, it still shares code with the booking application (CargoBookingContext).
	 * Thus, they are in a 'Shared-Kernel' relationship.
	 */
	CargoBookingContext [SK]<->[SK] VoyagePlanningContext
	
	/* Note that the splitting of the LocationContext is not mentioned in the original DDD sample of Evans.
	 * However, locations and the management around them, can somehow be seen as a separated concept which is used by other
	 * bounded contexts. But this is just an example, since we want to demonstrate our DSL with multiple bounded contexts.
	 */
	CargoBookingContext [D]<-[U,OHS,PL] LocationContext
	
	VoyagePlanningContext [D]<-[U,OHS,PL] LocationContext
	
}

/* The original booking application context */
BoundedContext CargoBookingContext {
	Module cargo {
		basePackage = se.citerus.dddsample.domain.model
		
		Aggregate CargoItineraryLegDeliveryRouteSpecification {
			Entity Cargo {
				aggregateRoot
				
				TrackingId trackingId
				- LocationShared origin
				- RouteSpecification routeSpecification
				- Itinerary itinerary
				- Delivery delivery
							
				Repository CargoRepository {
	                 @Cargo find(TrackingId trackingId) throws CargoNotFoundException;
	                 List<@Cargo> findAll;
	                 store(@Cargo cargo);
	                 TrackingId nextTrackingId();
				}
			}
			
			ValueObject Delivery {
				- TransportStatus transportStatus;
				- LocationShared lastKnownLocation;
				- Voyage currentVoyage;
				boolean misdirected;
				Date eta;
				- HandlingActivity nextExpectedActivity;
				boolean isUnloadedAtDestination;
				- RoutingStatus routingStatus;
				Date calculatedAt;
				- HandlingEvent lastEvent;
			}
			
			ValueObject HandlingActivity {
				HandlingEvent.Type handlingEventType
				- LocationShared location
				- Voyage voyage
			}
			
			ValueObject Itinerary {
				ItineraryNumber itineraryNumber
				- List<Leg> legs
			}
			
			ValueObject Leg {
				- Voyage voyage
				- LocationShared loadLocation
				- LocationShared unloadLocation
				Date loadTime
				Date unloadTime
			}
			
			ValueObject RouteSpecification {
				- LocationShared origin
				- LocationShared destination
				Date arrivalDeadline
			}
			
			enum TransportStatus {
	            NOT_RECEIVED, IN_PORT, ONBOARD_CARRIER, CLAIMED, UNKNOWN
			}
			
			enum RoutingStatus {
				NOT_ROUTED, ROUTED, MISROUTED
			}

			Service RoutingService {
            	List<@Itinerary> fetchRoutesForSpecification(@RouteSpecification routeSpecification) throws LocationNotFoundException;
			}
				
		}
	}
	
	Module handling {
		basePackage = se.citerus.dddsample.domain.model
		
		Aggregate Handling {
			DomainEvent HandlingEvent {
				aggregateRoot
				persistent
				
				Type handlingType;
				- Voyage voyage;
				- LocationShared location;
				Date completionTime;
				Date registrationTime;
				- Cargo cargo;
				
				Repository HandlingEventRepository {
					@HandlingHistory lookupHandlingHistoryOfCargo(TrackingId trackingId);
				}
			}
			
			ValueObject HandlingHistory {
				- List<HandlingEvent> handlingEvents
			}
		}
	}
}

/* We split the Voyage Planning into a separate bounded context as Evans proposes it in his book. */
BoundedContext VoyagePlanningContext {
	Module voyage {
		basePackage = se.citerus.dddsample.domain.model
		
		Aggregate Voyage {
			Entity Voyage {
				aggregateRoot
				
				- VoyageNumber voyageNumber;
  				- Schedule schedule;
				
				Repository VoyageRepository {
					
				}
			}
			
			ValueObject CarrierMovement {
				- LocationShared departureLocation;
  				- LocationShared arrivalLocation;
  				Date departureTime;
  				Date arrivalTime;
			}
			
			ValueObject Schedule {
				- List<CarrierMovement> carrierMovements
			}
			
			ValueObject VoyageNumber {
				String number
			}
		}
	}
}

/* Separate bounded context for managing the locations. */
BoundedContext LocationContext {
	Module location {
		basePackage = se.citerus.dddsample.domain.model
		
		Aggregate Location {
			Entity Location {
				aggregateRoot
				
				PortCode portcode
				- UnLocode unLocode;
  				String name;
				
				Repository LocationRepository {
					@Location find(@UnLocode unLocode);
					List<@Location> findAll();
				}
			}
			
			ValueObject UnLocode {
				String unLocode
			}
			
			ValueObject LocationShared {
				PortCode portCode
				- Location location
			}
		}
	}
}